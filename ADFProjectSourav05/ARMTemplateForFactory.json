{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFProjectSourav05"
		},
		"file_to_src_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'file_to_src'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KVProjectSourav.vault.azure.net/"
		},
		"file_to_src_db_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adfdemolearn.database.windows.net"
		},
		"file_to_src_db_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "adfdemolearn"
		},
		"file_to_src_db_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sosingh"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/file_to_src')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "file_to_src",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/file_to_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Policy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Policy.csv",
						"folderPath": "Input",
						"container": "sourcefile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PolicyNum",
						"type": "String"
					},
					{
						"name": "PremAmt",
						"type": "String"
					},
					{
						"name": "Commission",
						"type": "String"
					},
					{
						"name": "InsuredId",
						"type": "String"
					},
					{
						"name": "AgentId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/agent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Agent.csv",
						"folderPath": "Input",
						"container": "sourcefile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AgentName",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "AgentID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/insured')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Insured.csv",
						"folderPath": "Input",
						"container": "sourcefile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "InsuredId",
						"type": "String"
					},
					{
						"name": "InsuredName",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_agent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AgentName",
						"type": "varchar"
					},
					{
						"name": "AgentCity",
						"type": "varchar"
					},
					{
						"name": "AgentID",
						"type": "varchar"
					},
					{
						"name": "Created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_agent"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_insured')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InsuredId",
						"type": "varchar"
					},
					{
						"name": "InsuredName",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_insured"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_policy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "file_to_src_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Policynum",
						"type": "varchar"
					},
					{
						"name": "PremAmt",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Commission",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsuredID",
						"type": "varchar"
					},
					{
						"name": "AgentID",
						"type": "varchar"
					},
					{
						"name": "Created",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "src_policy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/file_to_src_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_to_src')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('file_to_src_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_to_src_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('file_to_src_db_properties_typeProperties_server')]",
					"database": "[parameters('file_to_src_db_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('file_to_src_db_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "DbPassWord"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/file_to_src')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Policy",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "insured",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "agent",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "src_policy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "src_insured",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "src_agent",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PolicyNum as string,",
						"          PremAmt as integer,",
						"          Commission as integer,",
						"          InsuredId as string,",
						"          AgentId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          InsuredId as string,",
						"          InsuredName as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          AgentName as string,",
						"          City as string,",
						"          AgentID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source1 derive(Created = currentTimestamp()) ~> derivedColumn1",
						"source2 derive(Created = currentTimestamp()) ~> derivedColumn2",
						"source3 derive(Created = currentTimestamp()) ~> derivedColumn3",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Policynum as string,",
						"          PremAmt as integer,",
						"          Commission as integer,",
						"          InsuredID as string,",
						"          AgentID as string,",
						"          Created as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Policynum = PolicyNum,",
						"          PremAmt,",
						"          Commission,",
						"          InsuredID = InsuredId,",
						"          AgentID = AgentId,",
						"          Created",
						"     )) ~> sink1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          InsuredId as string,",
						"          InsuredName as string,",
						"          City as string,",
						"          Created as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          InsuredId,",
						"          InsuredName,",
						"          City,",
						"          Created",
						"     )) ~> sink2",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AgentName as string,",
						"          AgentCity as string,",
						"          AgentID as string,",
						"          Created as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AgentName,",
						"          AgentCity = City,",
						"          AgentID,",
						"          Created",
						"     )) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Policy')]",
				"[concat(variables('factoryId'), '/datasets/insured')]",
				"[concat(variables('factoryId'), '/datasets/agent')]",
				"[concat(variables('factoryId'), '/datasets/src_policy')]",
				"[concat(variables('factoryId'), '/datasets/src_insured')]",
				"[concat(variables('factoryId'), '/datasets/src_agent')]"
			]
		}
	]
}